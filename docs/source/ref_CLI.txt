usage: iCount [-h] [-v]   ...

iCount: protein-RNA interaction analysis
========================================

iCount is a Python module and associated command-line interface (CLI), which provides all the
commands needed to process protein-RNA `iCLIP`_ interaction data and to identify and quantify
sites of protein-RNA interactions on RNA.

iCount's main input are FASTQ files with `iCLIP`_ sequencing data, its main output are BED files
with identified and quantified cross-linked sites.

A number of analyses are included in iCount that provide insights into the properties of
protein-RNA interaction.

optional arguments:
  -h, --help     show this help message and exit
  -v, --version  show program's version number and exit

Commands:
   
    releases     Get list of available ENSEMBL releases.
    species      Get list of species for given release.
    annotation   Download annotation in GTF file fromat.
    sequence     Downloads genome file in FASTA fromat.
    segment      Segmentation
    genes        Extract largest possible gene segments from GTF file.
    demultiplex  Demultiplexing
    cutadapt     Cutadapt
    mapindex     Generate STAR index
    map          Map using STAR
    xlsites      Identify and quantify cross-linked sites
    annotate     Cross-link site annotation
    clusters     Cluster sites
    group        Group BED files
    peaks        Peak finding
    summary      Cross-link site summary
    examples     Examples
    man          Print help for all commands.
    args         Print arguments form all CLI commands


releases
========

usage: iCount releases [-h] [-S] [-F] [-P] [-M]

Get list of available ENSEMBL releases.

Only allows ENSEMBL releases from 59 - 84.

optional arguments:
  -h, --help            show this help message and exit
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


species
=======

usage: iCount species [-h] [--release] [-S] [-F] [-P] [-M]

Get list of species for given release.

optional arguments:
  -h, --help            show this help message and exit
  --release             The release number (can be str or int). Only ENSEMBL releases (default: 84)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


annotation
==========

usage: iCount annotation [-h] [--release] [--target_dir] [--target_fname] [-S]
                         [-F] [-P] [-M]
                         species

Download annotation in GTF file fromat.

positional arguments:
  species               Species latin name

optional arguments:
  -h, --help            show this help message and exit
  --release             Release number. Only ENSEMBL releases from 59 - 84 are available (default: 84)
  --target_dir          Download to this directory (if not given, current working directory) (default: None)
  --target_fname        Annotation filename (must have .gz file extension). If not given, (default: None)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


sequence
========

usage: iCount sequence [-h] [--release] [--target_dir] [--target_fname]
                       [--tempdir] [--chromosomes  [...]] [-S] [-F] [-P] [-M]
                       species

Downloads genome file in FASTA fromat.

Several steps are performed:

    * querry for list off all FASTA files for given release and species
    * filter this list to get only whole chromosome files
    * if chromosomes paramter is given, take only specified chromosomes
    * sort list of these files to have the correct order
    * download each file and write it to target_fname

positional arguments:
  species               Species latin name

optional arguments:
  -h, --help            show this help message and exit
  --release             Release number. Only ENSEMBL releases from 59 - 84 are available (default: 84)
  --target_dir          Download to this directory (if not given, current working directory) (default: None)
  --target_fname        Annotation filename (must have .gz file extension). If not given, (default: None)
  --tempdir             Temporary directory with intermediate results (default: None)
  --chromosomes  [ ...]
                        If given, don't download the whole genome, but juts the given (default: None)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


segment
=======

usage: iCount segment [-h] [--cores] [-p] [-S] [-F] [-P] [-M]
                      gtf_in gtf_out genome_file

Segmentation
------------

Parse genome annotation, segment it and prepare a number of versions needed
for mapping and for various analyses:

- regions of genes (all isoforms and other parts merged into one region)
- regions of individual region types (segment each gene into exonic, intronic, nc, utr, etc..)

positional arguments:
  gtf_in                Path to input GTF file
  gtf_out               Path to output GTF file
  genome_file           Path to genome_file (.fai file or similar)

optional arguments:
  -h, --help            show this help message and exit
  --cores               Number of computer CPUs to use for calculation (default: 1)
  -p, --report_progress
                        Switch to show progress (default: False)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


genes
=====

usage: iCount genes [-h] [--fai_file] [--name] [--attribute] [-S] [-F] [-P]
                    [-M]
                    gtf_in gtf_out

Extract largest possible gene segments from GTF file.

positional arguments:
  gtf_in                Absolute path to gtf input file
  gtf_out               Absolute path to BED6 output file

optional arguments:
  -h, --help            show this help message and exit
  --fai_file            No description
  --name                Name for the 3rd column of output intervals (default: gene)
  --attribute           Attribute to use as unique identifier for output intervals (default: gene_id)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


demultiplex
===========

usage: iCount demultiplex [-h] [--minimum_length] [--prefix] [--outdir] [-S]
                          [-F] [-P] [-M]
                          fastq_fn adapter mismatches barcodes [barcodes ...]

Demultiplexing
==============

Split FASTQ file into separate FASTQ files, one for each sample barcode.
Saved FASTQ files contain sequences where sample barcode, random
barcode, and adapter sequences were removed. Random barcode is moved into
the header line, because needed in later steps, when removing PCR duplicates
and counting number of cross-link events.

.. autofunction:: iCount.demultiplex.run
.. autofunction:: iCount.demultiplex.demultiplex

positional arguments:
  fastq_fn              Path to reads from a sequencing library
  adapter               Adapter sequence to remove from ends of reads
  mismatches            Number of tolerated mismatches when comparing barcodes
  barcodes              List of barcodes used for library

optional arguments:
  -h, --help            show this help message and exit
  --minimum_length      Minimum length of trimmed sequence to keep (default: 15)
  --prefix              Prefix of generated FASTQ files (default: demux)
  --outdir              Output folder. Use local folder if none given (default: .)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


cutadapt
========

usage: iCount cutadapt [-h] [--qual_base] [--qual_trim] [--minimum_length]
                       [-S] [-F] [-P] [-M]
                       in_fname out_fname adapter

Cutadapt
--------

Interface to running cutadapt.

positional arguments:
  in_fname              Input filename (FASTQ)
  out_fname             Output filename (FASTQ)
  adapter               Sequence of an adapter ligated to the 3' end

optional arguments:
  -h, --help            show this help message and exit
  --qual_base           Assume that quality values in FASTQ are encoded as ascii(quality + (default: 64)
  --qual_trim           Trim low-quality bases before adapter removal (default: None)
  --minimum_length      Discard trimmed reads that are shorter than `minimum_length` (default: None)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


mapindex
========

usage: iCount mapindex [-h] [--annotation] [--overhang] [--overhang_min]
                       [--threads] [--logfile_path] [-S] [-F] [-P] [-M]
                       genome_fname outdir

Generate STAR index
-------------------

Call STAR to generate genome index, which is used for mapping.

Calls STAR to generate index based on genome sequence and annotation,
by passing the following parameters:

--runThreadN NumberOfThreads
--runMode genomeGenerate
--genomeDir /path/to/genomeDir
--genomeFastaFiles /path/to/genome/fasta1 /path/to/genome/fasta2 ...
--sjdbGTFfile /path/to/annotations.gtf
--sjdbOverhang ReadLength-1

positional arguments:
  genome_fname          Genome sequence to index
  outdir                Output folder, where to store genome index

optional arguments:
  -h, --help            show this help message and exit
  --annotation          Annotation that defines splice junctions (default: )
  --overhang            Sequence length around annotated junctions to be used by STAR when (default: 100)
  --overhang_min        TODO (default: 8)
  --threads             Number of threads that STAR can use for generating index (default: 1)
  --logfile_path        Location of logfile. Can be absolute or relative path (default: ./)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


map
===

usage: iCount map [-h] [--annotation] [--multimax] [--mismatches] [--threads]
                  [-S] [-F] [-P] [-M]
                  sequences_fname genomedir outdir

Map using STAR
--------------

Call STAR to map reads to genome index and produce BAM file.

Calls STAR to map sequence reads to reference genome, by passing the
following parameters:

--runThreadN NumberOfThreads
--genomeDir /path/to/genomeDir
--readFilesIn /path/to/read1 [/path/to/read2]
--readFilesCommand gunzip -c
--sjdbGTFfile /path/to/ann.gtf
--outFileNamePrefix /path/to/output/dir/prefix
#--outSAMmapqUnique Integer0to255
--outSAMprimaryFlag AllBestScore
--outFilterMultimapNmax maxHits # default 10
--outFilterMismatchNmax # default 10

positional arguments:
  sequences_fname       Sequencing reads to map to genome
  genomedir             Folder with genome index
  outdir                Output folder, where to store genome index

optional arguments:
  -h, --help            show this help message and exit
  --annotation          TODO (default: )
  --multimax            Number of allowed multiple hits (default: 10)
  --mismatches          Number of allowed mismatches (default: 2)
  --threads             Number of threads that STAR can use for generating index (default: 1)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


xlsites
=======

usage: iCount xlsites [-h] [--group_by] [--quant] [--mismatches] [--mapq_th]
                      [--multimax] [-p] [-S] [-F] [-P] [-M]
                      bam_fname unique_fname multi_fname

Identify and quantify cross-linked sites
----------------------------------------

Transforms information in BAM file on mapped reads and their randomers into BED file.

Reads information on mapped reads and their associated randomer sequence
to produce BED file with cross-link sites.

Reads are first grouped by the start position. Multiple reads that start on
same position and have the same (similar) randomer are collapsed into one (
most common, if many of same frequency, take longest) read.

Collapsed reads can then be grouped in three different ways: by the start,
middle or end position.

When grouping by the start, we report one positions before read start. That
is the most likely cross-linked site.

Grouping by middle and end positions can be used for diagnostic purposes.

TODO: check overlap between unique and multimap BED files, should be small,
otherwise, we should think of a more approapriate quantification of (division
of randomers among) unique mapped sites that overlap with multimapped reads

positional arguments:
  bam_fname             BAM file with mapped reads
  unique_fname          File to store data from uniquely mapped reads
  multi_fname           File to store data from multi-mapped reads

optional arguments:
  -h, --help            show this help message and exit
  --group_by            Group reads together by 'start', 'middle' or 'end' nucleotide (default: start)
  --quant               Report number of 'cDNA' or number of 'reads' (default: cDNA)
  --mismatches          Reads on same position with random barcode differing less than (default: 2)
  --mapq_th             Ignore hits with MAPQ < mapq_th (default: 0)
  --multimax            Ignore reads, mapped to more than ``multimax`` places (default: 50)
  -p, --report_progress
                        Switch to report progress (default: False)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


annotate
========

usage: iCount annotate [-h] [--subtype] [--excluded_types  [...]] [-S] [-F]
                       [-P] [-M]
                       annotation_file cross_links_file out_file

Cross-link site annotation
--------------------------

Annotate each cross link site with types of regions that intersect with it.

positional arguments:
  annotation_file       Path to annotation file (should be GTF and include `subtype` attribute)
  cross_links_file      Path to cross_links_file (should be BED6)
  out_file              Path to output file

optional arguments:
  -h, --help            show this help message and exit
  --subtype             Subtype (default: biotype)
  --excluded_types  [ ...]
                        Excluded types (default: None)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


clusters
========

usage: iCount clusters [-h] [--dist] [-S] [-F] [-P] [-M]
                       fin_sites fout_clusters

Cluster sites
-------------

Merge adjacent cross-linked sites into clusters.

Read bedGraph with (significant) cross-linked sites. Cluster together sites that
are apart at most a specified number of nucleotides. Return BED file with
clusters' coordinates.

positional arguments:
  fin_sites             Path to input file with sites (BED6 format)
  fout_clusters         Path to output file with merged sites (BED6)

optional arguments:
  -h, --help            show this help message and exit
  --dist                Distance between two cross_links to still merge them (default: 20)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


group
=====

usage: iCount group [-h] [-S] [-F] [-P] [-M] outfile files [files ...]

Group BED files
---------------

Group analysis docstring... TODO!

positional arguments:
  outfile               Path to output file
  files                 BED6 files(paths) to be merged

optional arguments:
  -h, --help            show this help message and exit
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


peaks
=====

usage: iCount peaks [-h] [--fout_scores] [--hw] [--fdr] [--perms] [--rnd_seed]
                    [--features  [...]] [-p] [--group_by] [-S] [-F] [-P] [-M]
                    fin_annotation fin_sites fout_peaks

Peak finding
------------

Determine local clusters of significantly cross-linked sites.

Read annotation and bedGraph with cross-linked sites. Perform permutation
analysis to determine significance (FDR) of individual sites. Return bedGraph of
significant sites.

positional arguments:
  fin_annotation        Path to input annotation file
  fin_sites             Path to input cross-links file
  fout_peaks            Path to "peaks" output file

optional arguments:
  -h, --help            show this help message and exit
  --fout_scores         Path to "scores" output file (default: None)
  --hw                  Half-window size (default: 3)
  --fdr                 FDR threshold (default: 0.05)
  --perms               Number of permutations (default: 100)
  --rnd_seed            Seed for random generator (default: 42)
  --features  [ ...]    Features over which to perform analysis (default: gene)
  -p, --report_progress
                        Print analysis progress (default: False)
  --group_by            No description
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


summary
=======

usage: iCount summary [-h] [--types_length_file] [--ndigits] [--subtype]
                      [--excluded_types  [...]] [-S] [-F] [-P] [-M]
                      annotation_file cross_links_file out_file
                      chrom_length_file

Cross-link site summary
-----------------------

Report proportion of cross-link events/sites on each region type

positional arguments:
  annotation_file       Path to annotation file (should be GTF and include subtype attribute)
  cross_links_file      Path to cross_links_file (should be BED6)
  out_file              Path to output file
  chrom_length_file     Path to file with chromosome lengths

optional arguments:
  -h, --help            show this help message and exit
  --types_length_file   Path to file with lengths of each type (default: None)
  --ndigits             Number of decimal places in results (default: 8)
  --subtype             Name of attribute to be used as subtype (default: biotype)
  --excluded_types  [ ...]
                        Types in 3rd column to exclude form analysis (default: None)
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


examples
========

usage: iCount examples [-h] [--in_dir] [-S] [-F] [-P] [-M]

Examples
========

optional arguments:
  -h, --help            show this help message and exit
  --in_dir              No description
  -S , --stdout_log     Threshold value (0-50) for logging to stdout. If 0, logging to stdout if turned OFF.
  -F , --file_log       Threshold value (0-50) for logging to file. If 0, logging to file if turned OFF.
  -P , --file_logpath   Path to log file.
  -M , --results_file   File into which to store Metrics.


args
====

usage: iCount args [-h]

optional arguments:
  -h, --help  show this help message and exit


